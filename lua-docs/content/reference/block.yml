keywords: ["cubzh", "game", "mobile", "scripting", "cube", "voxel", "world"]
type: "Block"
description: |
    A `Block` represents one block in a [Shape] or [MutableShape] (like the [Map]).

    A `Block` can be built with one of the [constructors](/reference/block#constructors), but it can also be obtained from a [Shape] or [MutableShape] with [Shape.GetBlock](/reference/shape#functions-getblock) or [MutableShape.GetBlock](/reference/mutableshape#functions-getblock).

    ⚠️ A `Block` obtained from an immutable object (like [Shape]) is in fact `read-only`, none of its properties can be set in that case.

constructors: 
  - description: |
      Creates a `Block` with `{0,0,0}` coordinates. ([Block.Position](#property-position))

      [Block.PaletteIndex](#property-paletteindex) is set to `paletteIndex`, but [Block.Properties](#property-properties) remains [nil] before the block is added to a [MutableShape] (owns the [Palette]).

    arguments:
    - name: "paletteIndex"
      type: "integer"
  - description: |
      Creates a `Block` with `{x,y,z}` coordinates. ([Block.Position](#property-position))

      [Block.PaletteIndex](#property-paletteindex) is set to `paletteIndex`, but [Block.Properties](#property-properties) remains [nil] before the block is added to a [MutableShape] (owns the [Palette]).
    arguments:
    - name: "paletteIndex"
      type: "integer"
    - name: "x"
      type: "number"
    - name: "y"
      type: "number"
    - name: "z"
      type: "number"
        
  - description: |
      Creates a `Block` with `position` coordinates. ([Block.Position](#property-position))

      [Block.PaletteIndex](#property-paletteindex) is set to `paletteIndex`, but [Block.Properties](#property-properties) remains [nil] before the block is added to a [MutableShape] (owns the [Palette]).
    arguments: 
    - name: "paletteIndex"
      type: "integer"
    - name: "position"
      type: "Number3"

properties:
    - name: "PaletteIndex"
      type: "integer"
      description: |
          Block's palette index. (first index is `1`)

          ⚠️ This has no effect if the block does not belong to a [Shape] or [MutableShape] (instances owning a [Palette]).
      samples:
          - code: |
              local b = someMutableShape:GetBlock(1, 2, 3)
              if b ~= nil then
                -- changes block's properties
                -- using different palette index
                b.PaletteIndex = 10 
              end
    - name: "Coordinates"
      read-only: true
      type: "Number3"
      description: |
          Block's coordinates in the [Shape] or [MutableShape] model.
      samples:
          - code: |
              local b = someShape:GetBlock(1, 2, 3)
              if b ~= nil then
                print(b.Coordinates) -- prints "[Number3 X: 1 Y: 2 Z: 3]"
              end

    - name: "Coords"
      read-only: true
      type: "Number3"
      description: |
          Shortcut to [Coordinates](/reference/block#property-coordinates).

    - name: "Position"
      read-only: true
      type: "Number3"
      description: |
          Position of [Block]'s negative X-Y-Z corner in world coordinates.
      samples:
          - code: |
              local b = someShape:GetBlock(1, 2, 3)
              if b ~= nil then
                print(b.Position)
              end

    - name: "Pos"
      read-only: true
      type: "Number3"
      description: |
          Shortcut to [Position](/reference/block#property-position).

    - name: "LocalPosition"
      read-only: true
      type: "Number3"
      description: |
          Position of [Block]'s center in local space, i.e. relative to the [Shape]'s or [MutableShape]'s parent.
      samples:
          - code: |
              local b = someShape:GetBlock(1, 2, 3)
              if b ~= nil then
                print(b.LocalPosition)
              end

    - name: "Properties"
      read-only: true
      type: "BlockProperties"
      description: |
          Returns Block's [BlockProperties].

          [nil] if the [Block] does not belong to a [Shape] or [MutableShape].

functions:
    - name: "AddNeighbor"
      description: |
          Adds a [Block], adjacent to the face passed as parameter.

          Returns created [Block] (or [nil] if it fails).

          ⚠️ Won't work with `read-only` Blocks.


      arguments:
        - name: "block"
          type: "Block"
        - name: "face"
          type: "Face"
      return: 
        - type: "Block"
      samples:
        - code: |
            -- add block when Action2 is triggered
            Client.Action2 = function()
              -- cast a ray, see if it touches a block
              local impact = Player:CastRay()
              if impact.Block ~= nil then
                -- add block, adjacent to the face that's been touched
                impact.Block:AddNeighbor(Block(1), impact.FaceTouched)
              end
            end
          media: "/media/block-add-neighbor.mp4"

    - name: "Remove"
      description: |
          Removes the `Block` from its parent [MutableShape].

          ⚠️ Won't work with `read-only` Blocks.
      samples:
        - code: |
            -- remove block when Action2 is triggered
            Client.Action2 = function()
              -- cast a ray, see if it touches a block
              local impact = Player:CastRay()
              -- won't do anything if impact.Block is nil
              impact.Block:Remove()
            end

    - name: "Replace"
      blocks:
      description: |
          Replaces the `Block` visual properties to be either: identical to the ones from the given [Block], to the given [Color], or to the ones located at given palette index.
        
          The position remains the same.

          ⚠️ Only works with blocks from a [MutableShape], not [Shape].
      argument-sets:
        -
          - name: "block"
            type: "Block"
        -
          - name: "color"
            type: "Color"
        -
          - name: "paletteIndex"
            type: "integer"
      samples:
        - code: |
            -- replace block when Action2 is triggered
            Client.Action2 = function()
              -- cast a ray, see if it touches a block
              local impact = Player:CastRay()
              -- won't do anything if impact.Block is nil
              impact.Block:Replace(Block(1)) -- make it a block with PaletteIndex == 1
            end

