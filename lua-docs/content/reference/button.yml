keywords: ["cubzh", "game", "mobile", "scripting", "cube", "voxel", "world"]
type: "Button"
description: |
    Buttons are user interface elements allowing users to take actions.

    Button is a shortcut to [Client].[UI].[Button].

    Buttons are automatically displayed on the screen upon creation.

constructors: 
  - description: |
      Creates a Button with optional parameters:
      - `text` displayed text
      - `horizontal_anchor` possible values: `Anchor.Left`, `Anchor.HCenter`, `Anchor.Right` (defaut)
      - `vertical_anchor` possible values: `Anchor.Top` (defaut), `Anchor.VCenter`, `Anchor.Bottom`

    arguments:
    - name: text
      type: string
      optional: true
    - name: hAnchor
      type: Anchor
      optional: true
    - name: vAnchor
      type: Anchor
      optional: true
    samples:
      - code: |
          -- adds a button at top right of the screen
          local btn1 = Button("I'm a button")
          -- adds a button at the center of the screen
          local btn2 = Button("I'm a button", Anchor.HCenter, Anchor.VCenter)

properties:
    - name: "Color"
      type: "Color"
      description: "Button's color."
      samples:
        - code: |
            -- set button color
            local btn = Button("test button")
            btn.Color = Color(255, 0, 0) -- make it red
    - name: "OnPress"
      type: "function"
      description: "Function triggered when pressing the button."
      samples:
        - code: |
            -- set button's press callback
            local btn = Button("test button")
            btn.OnPress = function()
              print("button pressed")
            end
    - name: "OnRelease"
      type: "function"
      description: "Function triggered when releasing the button."
      samples:
        - code: |
            -- set button's release callback
            local btn = Button("test button")
            btn.OnRelease = function()
              print("button released")
            end
    - name: "Text"
      type: "string"
      description: "Text being displayed by the Button."
      samples:
        - code: |
            -- update displayed text
            local btn = Button()
            btn.Text = "test button"
    - name: "TextColor"
      type: "Color"
      description: "Button's text color."
      samples:
        - code: |
            -- set button text color
            local btn = Button()
            btn.TextColor = Color(100, 0, 0)

functions:
    - name: "Remove"
      description: "Removes the Button."
      samples:
       - code: |
          -- removes button from screen
          btn:Remove()

    - name: "Add"
      description: |
          Displays a button that has been removed.
          By default, original anchors are kepts, but it's possible to supply new ones.

          Calling `Add` for a button that's already displayed has no effect.

      arguments:
        - name: hAnchor
          type: Anchor
          optional: true
        - name: vAnchor
          type: Anchor
          optional: true
      samples:
       - code: |
          myButton = Button("do something")
          -- by default, the button is displayed upon creation
          -- let's remove it:
          myButton:Remove()
          -- we can add it back with different anchors: 
          btn:Add(Anchor.Center, Anchor.Bottom)
